!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3"),require("jQuery"),require("tippy.js")):"function"==typeof define&&define.amd?define("nodelink_vis_coauthorship",["d3","jQuery","tippy.js"],e):"object"==typeof exports?exports.nodelink_vis_coauthorship=e(require("d3"),require("jQuery"),require("tippy.js")):t.nodelink_vis_coauthorship=e(t.d3,t.jQuery,t.tippy)}("undefined"!=typeof self?self:this,function(t,e,n){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"NodeLinkCoauthorshipVis",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(e,"activateTooltips",{enumerable:!0,get:function(){return i.default}});var r=o(n(3)),i=o(n(4));function o(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}(n(0));function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=((r=n(1))&&r.__esModule?r:{default:r}).default,u=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var n={el:null,data:null,width:960,color:i.scaleOrdinal(i.schemeCategory10),forceStrength:-2};Object.assign(this,n,e),this._data=this.data,this.data=this.updateData,void 0===this.height&&(this.height=.625*this.width),this.manyBody=i.forceManyBody().strength(this.forceStrength),this.init=!1,console.log(this._data),null!==this.el&&null!==this._data&&(this.draw(this.el),this.init=!0)}var e,n,r;return e=t,(n=[{key:"getLinkId",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.source.toString(),r=t.target.toString(),i=[n,r],o="-&-";return!0===e&&i.sort(),i[0]+o+i[1]}},{key:"updateData",value:function(t){return arguments.length?(this._data=t,!1===this.init?(this.draw(this.el),this.init=!0):console.log("UPDATING DATA NOT YET IMPLEMENTED"),this):this._data}},{key:"draw",value:function(t){var e=this.width,n=this.height,r=this._data,o=this.manyBody,u=this.color,l=this.getLinkId;return t.each(function(){var t=i.select(this).append("svg").attr("width",e).attr("height",n);function c(t){i.event.active||d.alphaTarget(.3).restart(),t.fx=t.x,t.fy=t.y}function s(t){t.fx=i.event.x,t.fy=i.event.y}function f(t){i.event.active||d.alphaTarget(0),t.fx=null,t.fy=null}console.log(r),r.nodes.forEach(function(t){t.id=t.id.toString()}),r.links.forEach(function(t){t.id=l(t,r.directed)});var d=i.forceSimulation().force("link",i.forceLink().id(function(t){return t.id})).force("charge",o).force("center",i.forceCenter(e/2,n/2));d.nodes(r.nodes).on("tick",function(){v.attr("cx",function(t){return t.x=Math.max(t.radius,Math.min(e-t.radius,t.x)),t.x}).attr("cy",function(t){return t.y=Math.max(t.radius,Math.min(e-t.radius,t.y)),t.y}).attr("transform",function(t){return"translate("+t.x+","+t.y+")"}),y.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}),d.force("link").links(r.links),this.simulation=d;var p=i.scaleLinear().range([4,12]),h=t.append("g"),y=h.append("g").attr("class","links").selectAll(".link");y=y.data(r.links,function(t){return t.id});var v=h.append("g").attr("class","nodes").selectAll(".node");v=function(t){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,a=u(0);p.domain(i.extent(r.nodes,function(t){return t.hasOwnProperty("flow")?t.flow:[5,5]})),console.log(p.domain());var l=t.enter().append("g").attr("class","node").call(i.drag().on("start",c).on("drag",s).on("end",f));return t=t.merge(l).attr("cx",function(t){return t.x=e/2+t.x}).attr("cy",function(t){return t.y=n/2+t.y}).each(function(t){t.hasOwnProperty("flow")?t.radius=p(t.flow):t.radius=5,t.hasOwnProperty("color_group")?t.color=u(t.color_group):t.hasOwnProperty("cl_top")?t.color=u(t.cl_top):t.color=a}),l.attr("transform",function(t){return"translate("+t.x+","+t.y+")"}).append("circle").attr("fill",function(t){return t.color}).attr("r",0),null!==o?t.selectAll("circle").transition(o).attr("r",function(t){return t.radius}).attr("fill",function(t){return t.color}):t.selectAll("circle").attr("r",function(t){return t.radius}).attr("fill",function(t){return t.color}),t}(v=v.data(r.nodes,function(t){return t.id})),y=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=t.enter().append("line").attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y}).attr("class","link");return(t=t.merge(n)).attr("stroke-width",function(t){return Math.sqrt(t.weight)}),null!==e&&n.style("stroke","green"),t}(y),t.on("click",function(){v.classed("focus",!1),v.selectAll("text").style("display","none"),y.style("opacity",1),a("#nodelab-form").css("visibility","hidden")})}),this}}])&&o(e.prototype,n),r&&o(e,r),t}();e.default=u,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=o(n(5));n(6);var i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}(n(0));function o(t){return t&&t.__esModule?t:{default:t}}var a=o(n(1)).default,u=function(){function t(t,e,n){t.find("."+e).find(".template-content").text(n)}console.log("activateTooltips()"),i.selectAll(".node circle").each(function(e){var n=a(l).clone().attr("id",null);if(this.hasOwnProperty("_tippy"))var o=this._tippy;else var o=(0,r.default)(this);t(n,"author_name",e.author_name),e.hasOwnProperty("affil_name")&&e.affil_name.length?t(n,"affil_name",e.affil_name):n.find(".affil_name").hide();var u=n.find(".paper_titles").find(".template-content"),c=e.papers;c.sort(function(t,e){return i.ascending(t.title,e.title)});for(var s=0,f=c.length;s<f;s++){var d=a('<li class="paper_title">').text(c[s].title);u.append(d)}o.setContent(n.html())})};e.default=u,r.default.setDefaults({theme:"light-border",animateFill:!1,animation:"fade"});var l=document.getElementById("tooltip-template");t.exports=e.default},function(t,e){t.exports=n},function(t,e){}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub2RlbGlua192aXNfY29hdXRob3JzaGlwL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9ub2RlbGlua192aXNfY29hdXRob3JzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL25vZGVsaW5rX3Zpc19jb2F1dGhvcnNoaXAvZXh0ZXJuYWwgXCJkM1wiIiwid2VicGFjazovL25vZGVsaW5rX3Zpc19jb2F1dGhvcnNoaXAvZXh0ZXJuYWwgXCJqUXVlcnlcIiIsIndlYnBhY2s6Ly9ub2RlbGlua192aXNfY29hdXRob3JzaGlwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL25vZGVsaW5rX3Zpc19jb2F1dGhvcnNoaXAvLi9zcmMvdmlzLmpzIiwid2VicGFjazovL25vZGVsaW5rX3Zpc19jb2F1dGhvcnNoaXAvLi9zcmMvY29hdXRob3JzaGlwX3Rvb2x0aXBzLmpzIiwid2VicGFjazovL25vZGVsaW5rX3Zpc19jb2F1dGhvcnNoaXAvZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcInRpcHB5LmpzXCIsXCJjb21tb25qczJcIjpcInRpcHB5LmpzXCIsXCJhbWRcIjpcInRpcHB5LmpzXCIsXCJyb290XCI6XCJ0aXBweVwifSJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsInRoaXMiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181X18iLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX3ZpcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY29hdXRob3JzaGlwX3Rvb2x0aXBzIiwiZDMiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIiQiLCJkZWZhdWx0IiwiTm9kZUxpbmtDb2F1dGhvcnNoaXBWaXMiLCJvcHRzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX2NsYXNzQ2FsbENoZWNrIiwiZGVmYXVsdHMiLCJlbCIsImRhdGEiLCJ3aWR0aCIsImNvbG9yIiwic2NhbGVPcmRpbmFsIiwic2NoZW1lQ2F0ZWdvcnkxMCIsImZvcmNlU3RyZW5ndGgiLCJhc3NpZ24iLCJfZGF0YSIsInVwZGF0ZURhdGEiLCJoZWlnaHQiLCJtYW55Qm9keSIsImZvcmNlTWFueUJvZHkiLCJzdHJlbmd0aCIsImluaXQiLCJjb25zb2xlIiwibG9nIiwiZHJhdyIsImxpbmsiLCJkaXJlY3RlZCIsInNvdXJjZSIsInRvU3RyaW5nIiwidGFyZ2V0IiwiaXRlbXMiLCJzZXAiLCJzb3J0Iiwic2VsZWN0aW9uIiwiZ3JhcGgiLCJnZXRMaW5rSWQiLCJlYWNoIiwic3ZnIiwic2VsZWN0IiwiYXBwZW5kIiwiYXR0ciIsImRyYWdzdGFydGVkIiwiZXZlbnQiLCJhY3RpdmUiLCJzaW11bGF0aW9uIiwiYWxwaGFUYXJnZXQiLCJyZXN0YXJ0IiwiZngiLCJ4IiwiZnkiLCJ5IiwiZHJhZ2dlZCIsImRyYWdlbmRlZCIsIm5vZGVzIiwiZm9yRWFjaCIsImlkIiwibGlua3MiLCJmb3JjZVNpbXVsYXRpb24iLCJmb3JjZSIsImZvcmNlTGluayIsImZvcmNlQ2VudGVyIiwib24iLCJub2RlIiwiTWF0aCIsIm1heCIsInJhZGl1cyIsIm1pbiIsInNpemVTY2FsZSIsInNjYWxlTGluZWFyIiwicmFuZ2UiLCJnIiwic2VsZWN0QWxsIiwiZGVmYXVsdENvbG9yIiwiZG9tYWluIiwiZXh0ZW50IiwiZmxvdyIsIm5vZGVFbnRlciIsImVudGVyIiwiZHJhZyIsIm1lcmdlIiwiY29sb3JfZ3JvdXAiLCJjbF90b3AiLCJ0cmFuc2l0aW9uIiwiZW50ZXJOb2RlcyIsImxpbmtFbnRlciIsInNxcnQiLCJ3ZWlnaHQiLCJzdHlsZSIsImVudGVyTGlua3MiLCJjbGFzc2VkIiwiY3NzIiwiX3RpcHB5IiwiZmlsbEh0bWwiLCIkdGVtcGxhdGUiLCJjbGFzc25hbWUiLCJ0ZXh0Q29udGVudCIsImZpbmQiLCJ0ZXh0IiwiJHRvb2x0aXBOb2RlIiwidGVtcGxhdGUiLCJjbG9uZSIsInRpcHB5SW5zdGFuY2UiLCJhdXRob3JfbmFtZSIsImFmZmlsX25hbWUiLCJoaWRlIiwiJHBhcGVyVGl0bGVzIiwicGFwZXJzIiwiYSIsImIiLCJhc2NlbmRpbmciLCJ0aXRsZSIsImxlbiIsIiRsaXN0SXRlbSIsInNldENvbnRlbnQiLCJodG1sIiwic2V0RGVmYXVsdHMiLCJ0aGVtZSIsImFuaW1hdGVGaWxsIiwiYW5pbWF0aW9uIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxpQkFBQUMsU0FBQSxpQkFBQUMsT0FDQUEsT0FBQUQsUUFBQUQsRUFBQUcsUUFBQSxNQUFBQSxRQUFBLFVBQUFBLFFBQUEsYUFDQSxtQkFBQUMsZUFBQUMsSUFDQUQsT0FBQSx1REFBQUosR0FDQSxpQkFBQUMsUUFDQUEsUUFBQSwwQkFBQUQsRUFBQUcsUUFBQSxNQUFBQSxRQUFBLFVBQUFBLFFBQUEsYUFFQUosRUFBQSwwQkFBQUMsRUFBQUQsRUFBQSxHQUFBQSxFQUFBLE9BQUFBLEVBQUEsT0FSQSxDQVNDLG9CQUFBTyxVQUFBQyxLQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0QsbUJDVEEsSUFBQUMsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBWixRQUdBLElBQUFDLEVBQUFTLEVBQUFFLEdBQUEsQ0FDQUMsRUFBQUQsRUFDQUUsR0FBQSxFQUNBZCxRQUFBLElBVUEsT0FOQWUsRUFBQUgsR0FBQUksS0FBQWYsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQVcsR0FHQVYsRUFBQWEsR0FBQSxFQUdBYixFQUFBRCxRQTBEQSxPQXJEQVcsRUFBQU0sRUFBQUYsRUFHQUosRUFBQU8sRUFBQVIsRUFHQUMsRUFBQVEsRUFBQSxTQUFBbkIsRUFBQW9CLEVBQUFDLEdBQ0FWLEVBQUFXLEVBQUF0QixFQUFBb0IsSUFDQUcsT0FBQUMsZUFBQXhCLEVBQUFvQixFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDVixFQUFBZ0IsRUFBQSxTQUFBM0IsR0FDQSxvQkFBQTRCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUF4QixFQUFBNEIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQXhCLEVBQUEsY0FBaUQ4QixPQUFBLEtBUWpEbkIsRUFBQW9CLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFuQixFQUFBbUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBeEIsRUFBQWdCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFBTSxLQUFBTixFQUFBbkIsRUFBQVEsRUFBQWUsRUFBQUUsRUFBQSxTQUFBQSxHQUFnSCxPQUFBTixFQUFBTSxJQUFxQkMsS0FBQSxLQUFBRCxJQUNySSxPQUFBRixHQUlBdkIsRUFBQTJCLEVBQUEsU0FBQXJDLEdBQ0EsSUFBQW9CLEVBQUFwQixLQUFBZ0MsV0FDQSxXQUEyQixPQUFBaEMsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBVSxFQUFBUSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFWLEVBQUFXLEVBQUEsU0FBQWlCLEVBQUFDLEdBQXNELE9BQUFqQixPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUF1QixFQUFBQyxJQUd0RDdCLEVBQUFnQyxFQUFBLEdBSUFoQyxJQUFBaUMsRUFBQSxtQkNsRkEzQyxFQUFBRCxRQUFBTyxpQkNBQU4sRUFBQUQsUUFBQVEsa1JDQUEsSUFBQXFDLEVBQUFDLEVBQUFuQyxFQUFBLElBQ0FvQyxFQUFBRCxFQUFBbkMsRUFBQSx3SkNDQSxNQUFBcUMseVNBQUFDLENBQUF0QyxFQUFBLDBLQUVBLElBQU11QyxNQUROdkMsRUFBQSxpQ0FDT3dDLHFCQVNOLFNBQUFDLElBQXVCLElBQVhDLEVBQVdDLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUosZ0dBQUlHLENBQUFuRCxLQUFBOEMsR0FDdEIsSUFBTU0sRUFBVyxDQUNoQkMsR0FBSSxLQUNKQyxLQUFNLEtBQ05DLE1BQU8sSUFDUEMsTUFBT2QsRUFBR2UsYUFBYWYsRUFBR2dCLGtCQUMxQkMsZUFBZ0IsR0FFakIxQyxPQUFPMkMsT0FBTzVELEtBQU1vRCxFQUFVTCxHQUM5Qi9DLEtBQUs2RCxNQUFRN0QsS0FBS3NELEtBQ2xCdEQsS0FBS3NELEtBQU90RCxLQUFLOEQsZ0JBQ1UsSUFBaEI5RCxLQUFLK0QsU0FDZi9ELEtBQUsrRCxPQUFTLEtBQU8vRCxLQUFLdUQsT0FFM0J2RCxLQUFLZ0UsU0FBV3RCLEVBQUd1QixnQkFDYkMsU0FBU2xFLEtBQUsyRCxlQUNwQjNELEtBQUttRSxNQUFPLEVBQ1pDLFFBQVFDLElBQUlyRSxLQUFLNkQsT0FDRCxPQUFaN0QsS0FBS3FELElBQThCLE9BQWZyRCxLQUFLNkQsUUFDNUI3RCxLQUFLc0UsS0FBS3RFLEtBQUtxRCxJQUNmckQsS0FBS21FLE1BQU8sNERBSUpJLEdBQXdCLElBQWxCQyxFQUFrQnhCLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxJQUFBQSxVQUFBLEdBRzdCeUIsRUFBU0YsRUFBS0UsT0FBT0MsV0FDckJDLEVBQVNKLEVBQUtJLE9BQU9ELFdBQ3JCRSxFQUFRLENBQUNILEVBQVFFLEdBQ2pCRSxFQUFNLE1BSVYsT0FIaUIsSUFBYkwsR0FDSEksRUFBTUUsT0FFQUYsRUFBTSxHQUFLQyxFQUFNRCxFQUFNLHNDQUdwQnBELEdBQ1YsT0FBS3dCLFVBQVVDLFFBQ2ZqRCxLQUFLNkQsTUFBUXJDLEdBQ0ssSUFBZHhCLEtBQUttRSxNQUNSbkUsS0FBS3NFLEtBQUt0RSxLQUFLcUQsSUFDZnJELEtBQUttRSxNQUFPLEdBSVpDLFFBQVFDLElBQUkscUNBSU5yRSxNQVp1QkEsS0FBSzZELG1DQWUvQmtCLEdBQ0osSUFDSXhCLEVBQVF2RCxLQUFLdUQsTUFDYlEsRUFBUy9ELEtBQUsrRCxPQUNkaUIsRUFBUWhGLEtBQUs2RCxNQUNiRyxFQUFXaEUsS0FBS2dFLFNBQ2hCUixFQUFReEQsS0FBS3dELE1BQ2J5QixFQUFZakYsS0FBS2lGLFVBMlJ0QixPQTFSQ0YsRUFBVUcsS0FBSyxXQUNkLElBRUlDLEVBQU16QyxFQUFHMEMsT0FGQ3BGLE1BRWVxRixPQUFPLE9BQU9DLEtBQUssUUFBUy9CLEdBQU8rQixLQUFLLFNBQVV2QixHQUcvRSxTQUFTd0IsRUFBWTFFLEdBQ2Y2QixFQUFHOEMsTUFBTUMsUUFBUUMsRUFBV0MsWUFBWSxJQUFLQyxVQUNsRC9FLEVBQUVnRixHQUFLaEYsRUFBRWlGLEVBQ1RqRixFQUFFa0YsR0FBS2xGLEVBQUVtRixFQUdWLFNBQVNDLEVBQVFwRixHQUNoQkEsRUFBRWdGLEdBQUtuRCxFQUFHOEMsTUFBTU0sRUFDaEJqRixFQUFFa0YsR0FBS3JELEVBQUc4QyxNQUFNUSxFQUdqQixTQUFTRSxFQUFVckYsR0FDYjZCLEVBQUc4QyxNQUFNQyxRQUFRQyxFQUFXQyxZQUFZLEdBQzdDOUUsRUFBRWdGLEdBQUssS0FDUGhGLEVBQUVrRixHQUFLLEtBaEJSM0IsUUFBUUMsSUFBSVcsR0FxSVpBLEVBQU1tQixNQUFNQyxRQUFRLFNBQVN2RixHQUM1QkEsRUFBRXdGLEdBQUt4RixFQUFFd0YsR0FBRzNCLGFBRWJNLEVBQU1zQixNQUFNRixRQUFRLFNBQVN2RixHQUM1QkEsRUFBRXdGLEdBQUtwQixFQUFVcEUsRUFBR21FLEVBQU1SLFlBRzNCLElBQUlrQixFQUFhaEQsRUFBRzZELGtCQUNsQkMsTUFBTSxPQUFROUQsRUFBRytELFlBQVlKLEdBQUcsU0FBU3hGLEdBQUssT0FBT0EsRUFBRXdGLE1BRXZERyxNQUFNLFNBQVV4QyxHQUNoQndDLE1BQU0sU0FBVTlELEVBQUdnRSxZQUFZbkQsRUFBUSxFQUFHUSxFQUFTLElBRXBEMkIsRUFDRVMsTUFBTW5CLEVBQU1tQixPQUNaUSxHQUFHLE9BeURMLFdBTURDLEVBQ0V0QixLQUFLLEtBQU0sU0FBU3pFLEdBRXBCLE9BREFBLEVBQUVpRixFQUFJZSxLQUFLQyxJQUFJakcsRUFBRWtHLE9BQVFGLEtBQUtHLElBQUl6RCxFQUFRMUMsRUFBRWtHLE9BQVFsRyxFQUFFaUYsSUFDL0NqRixFQUFFaUYsSUFDVFIsS0FBSyxLQUFNLFNBQVN6RSxHQUVwQixPQURBQSxFQUFFbUYsRUFBSWEsS0FBS0MsSUFBSWpHLEVBQUVrRyxPQUFRRixLQUFLRyxJQUFJekQsRUFBUTFDLEVBQUVrRyxPQUFRbEcsRUFBRW1GLElBQy9DbkYsRUFBRW1GLElBQ1RWLEtBQUssWUFBYSxTQUFTekUsR0FBSyxNQUFPLGFBQWVBLEVBQUVpRixFQUFJLElBQU1qRixFQUFFbUYsRUFBSSxNQUUxRXpCLEVBRUVlLEtBQUssS0FBTSxTQUFTekUsR0FBSyxPQUFPQSxFQUFFNEQsT0FBT3FCLElBQ3pDUixLQUFLLEtBQU0sU0FBU3pFLEdBQUssT0FBT0EsRUFBRTRELE9BQU91QixJQUN6Q1YsS0FBSyxLQUFNLFNBQVN6RSxHQUFLLE9BQU9BLEVBQUU4RCxPQUFPbUIsSUFDekNSLEtBQUssS0FBTSxTQUFTekUsR0FBSyxPQUFPQSxFQUFFOEQsT0FBT3FCLE1BM0UxQ04sRUFBV2MsTUFBTSxRQUNmRixNQUFNdEIsRUFBTXNCLE9BRWR0RyxLQUFLMEYsV0FBYUEsRUFFbkIsSUFBSXVCLEVBQVl2RSxFQUFHd0UsY0FDakJDLE1BQU0sQ0FBQyxFQUFHLEtBR1JDLEVBQUlqQyxFQUFJRSxPQUFPLEtBRWRkLEVBQU82QyxFQUFFL0IsT0FBTyxLQUNsQkMsS0FBSyxRQUFTLFNBRWhCK0IsVUFBVSxTQUVYOUMsRUFBT0EsRUFBS2pCLEtBQUswQixFQUFNc0IsTUFBTyxTQUFTekYsR0FDdEMsT0FBT0EsRUFBRXdGLEtBR1QsSUFBSU8sRUFBT1EsRUFBRS9CLE9BQU8sS0FDbEJDLEtBQUssUUFBUyxTQUNoQitCLFVBQVUsU0FJWFQsRUE3SkEsU0FBb0JBLEdBQWdCLElBQVZuRixFQUFVdUIsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBTixLQUd6QnNFLEVBQWU5RCxFQUFNLEdBRXpCeUQsRUFBVU0sT0FBTzdFLEVBQUc4RSxPQUFPeEMsRUFBTW1CLE1BQU8sU0FBU3RGLEdBQ2hELE9BQUlBLEVBQUV1QixlQUFlLFFBQ2J2QixFQUFFNEcsS0FFRixDQUFDLEVBQUUsTUFHWnJELFFBQVFDLElBQUk0QyxFQUFVTSxVQUd0QixJQUFJRyxFQUFZZCxFQUFLZSxRQUFRdEMsT0FBTyxLQUVsQ0MsS0FBSyxRQUFTLFFBTWQ1RSxLQUFLZ0MsRUFBR2tGLE9BQ1BqQixHQUFHLFFBQVNwQixHQUNab0IsR0FBRyxPQUFRVixHQUNYVSxHQUFHLE1BQU9ULElBeURiLE9BckRBVSxFQUFPQSxFQUFLaUIsTUFBTUgsR0FDaEJwQyxLQUFLLEtBQU0sU0FBU3pFLEdBQUssT0FBT0EsRUFBRWlGLEVBQUt2QyxFQUFNLEVBQUsxQyxFQUFFaUYsSUFDcERSLEtBQUssS0FBTSxTQUFTekUsR0FBSyxPQUFPQSxFQUFFbUYsRUFBS2pDLEVBQU8sRUFBS2xELEVBQUVtRixJQUNyRGQsS0FBSyxTQUFTckUsR0FDVkEsRUFBRXVCLGVBQWUsUUFDcEJ2QixFQUFFa0csT0FBU0UsRUFBVXBHLEVBQUU0RyxNQUV2QjVHLEVBQUVrRyxPQUFTLEVBR1JsRyxFQUFFdUIsZUFBZSxlQUNwQnZCLEVBQUUyQyxNQUFRQSxFQUFNM0MsRUFBRWlILGFBQ1JqSCxFQUFFdUIsZUFBZSxVQUMzQnZCLEVBQUUyQyxNQUFRQSxFQUFNM0MsRUFBRWtILFFBRWxCbEgsRUFBRTJDLE1BQVE4RCxJQUlJSSxFQUNmcEMsS0FBSyxZQUFhLFNBQVN6RSxHQUFLLE1BQU8sYUFBZUEsRUFBRWlGLEVBQUksSUFBTWpGLEVBQUVtRixFQUFJLE1BQ3hFWCxPQUFPLFVBR1BDLEtBQUssT0FBUSxTQUFTekUsR0FBSyxPQUFPQSxFQUFFMkMsUUFDcEM4QixLQUFLLElBQUssR0FFRixPQUFON0QsRUFLSG1GLEVBQ0VTLFVBQVUsVUFBVVcsV0FBV3ZHLEdBQy9CNkQsS0FBSyxJQUFLLFNBQVN6RSxHQUNuQixPQUFPQSxFQUFFa0csU0FHVHpCLEtBQUssT0FBUSxTQUFTekUsR0FDdEIsT0FBT0EsRUFBRTJDLFFBSVhvRCxFQUFLUyxVQUFVLFVBQ2IvQixLQUFLLElBQUssU0FBU3pFLEdBQ25CLE9BQU9BLEVBQUVrRyxTQUdUekIsS0FBSyxPQUFRLFNBQVN6RSxHQUN0QixPQUFPQSxFQUFFMkMsUUFJTG9ELEVBMEVEcUIsQ0FGUHJCLEVBQU9BLEVBQUt0RCxLQUFLMEIsRUFBTW1CLE1BQU8sU0FBU3RGLEdBQUssT0FBT0EsRUFBRXdGLE1BR3JEOUIsRUF4RUEsU0FBb0JBLEdBQWdCLElBQVY5QyxFQUFVdUIsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBTixLQUl6QmtGLEVBQVkzRCxFQUFLb0QsUUFBUXRDLE9BQU8sUUFDbENDLEtBQUssS0FBTSxTQUFTekUsR0FBSyxPQUFPQSxFQUFFNEQsT0FBT3FCLElBQ3pDUixLQUFLLEtBQU0sU0FBU3pFLEdBQUssT0FBT0EsRUFBRTRELE9BQU91QixJQUN6Q1YsS0FBSyxLQUFNLFNBQVN6RSxHQUFLLE9BQU9BLEVBQUU4RCxPQUFPbUIsSUFDekNSLEtBQUssS0FBTSxTQUFTekUsR0FBSyxPQUFPQSxFQUFFOEQsT0FBT3FCLElBQ3pDVixLQUFLLFFBQVMsUUFlaEIsT0FkQWYsRUFBT0EsRUFBS3NELE1BQU1LLElBRWY1QyxLQUFLLGVBQWdCLFNBQVN6RSxHQUFLLE9BQU9nRyxLQUFLc0IsS0FBS3RILEVBQUV1SCxVQUUvQyxPQUFOM0csR0FDSHlHLEVBRUVHLE1BQU0sU0FBVSxTQU9aOUQsRUFnREQrRCxDQUFXL0QsR0EyRGxCWSxFQUFJd0IsR0FBRyxRQVJQLFdBQ0NDLEVBQUsyQixRQUFRLFNBQVMsR0FDdEIzQixFQUFLUyxVQUFVLFFBQVFnQixNQUFNLFVBQVcsUUFHeEM5RCxFQUFLOEQsTUFBTSxVQUFXLEdBQ3RCekYsRUFBRyxpQkFBa0I0RixJQUFLLGFBQWUsY0E0Q3JDeEksMEtDcFdSLElBQUF5SSxFQUFBakcsRUFBQW5DLEVBQUEsSUFFQUEsRUFBQSxHQUVBLElBQUFxQyx5U0FBQUMsQ0FBQXRDLEVBQUEsdURBRUEsSUFBTXVDLEVBRE5KLEVBQUFuQyxFQUFBLElBQ093QyxVQVdQLFdBR0MsU0FBUzZGLEVBQVNDLEVBQVdDLEVBQVdDLEdBQ3ZDRixFQUFVRyxLQUFNLElBQU1GLEdBQVlFLEtBQU0scUJBQXNCQyxLQUFLRixHQUhwRXpFLFFBQVFDLElBQUksc0JBTVozQixFQUFHMkUsVUFBVSxnQkFBZ0JuQyxLQUFLLFNBQVNyRSxHQUMxQyxJQUFJbUksRUFBZXBHLEVBQUVxRyxHQUFVQyxRQUFRNUQsS0FBSyxLQUFNLE1BQ2xELEdBQUl0RixLQUFLb0MsZUFBZSxVQUN2QixJQUFJK0csRUFBZ0JuSixLQUFLeUksWUFFekIsSUFBSVUsR0FBZ0IsRUFBQVYsRUFBQTVGLFNBQU03QyxNQUUzQjBJLEVBQVNNLEVBQWMsY0FBZW5JLEVBQUV1SSxhQUNwQ3ZJLEVBQUV1QixlQUFlLGVBQWlCdkIsRUFBRXdJLFdBQVdwRyxPQUNsRHlGLEVBQVNNLEVBQWMsYUFBY25JLEVBQUV3SSxZQUV2Q0wsRUFBYUYsS0FBSyxlQUFlUSxPQUdsQyxJQUFJQyxFQUFlUCxFQUFhRixLQUFNLGlCQUFrQkEsS0FBTSxxQkFDMURVLEVBQVMzSSxFQUFFMkksT0FFZkEsRUFBTzFFLEtBQUssU0FBUzJFLEVBQUdDLEdBQUssT0FBT2hILEVBQUdpSCxVQUFVRixFQUFFRyxNQUFPRixFQUFFRSxTQUM1RCxJQUFLLElBQUlySixFQUFJLEVBQUdzSixFQUFNTCxFQUFPdkcsT0FBUTFDLEVBQUlzSixFQUFLdEosSUFBSyxDQUNsRCxJQUFJdUosRUFBWWxILEVBQUcsNEJBQTZCbUcsS0FBS1MsRUFBT2pKLEdBQUdxSixPQUMvREwsRUFBYWxFLE9BQVF5RSxHQUV0QlgsRUFBY1ksV0FBV2YsRUFBYWdCLHVCQXBDeEN2QixFQUFBNUYsUUFBTW9ILFlBQVksQ0FDakJDLE1BQVMsZUFDVEMsYUFBZSxFQUNmQyxVQUFhLFNBRWQsSUFBTW5CLEVBQVdvQixTQUFTQyxlQUFlLHVEQ2Z6QzNLLEVBQUFELFFBQUFTIiwiZmlsZSI6Im5vZGVsaW5rX3Zpc19jb2F1dGhvcnNoaXAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiZDNcIiksIHJlcXVpcmUoXCJqUXVlcnlcIiksIHJlcXVpcmUoXCJ0aXBweS5qc1wiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIm5vZGVsaW5rX3Zpc19jb2F1dGhvcnNoaXBcIiwgW1wiZDNcIiwgXCJqUXVlcnlcIiwgXCJ0aXBweS5qc1wiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJub2RlbGlua192aXNfY29hdXRob3JzaGlwXCJdID0gZmFjdG9yeShyZXF1aXJlKFwiZDNcIiksIHJlcXVpcmUoXCJqUXVlcnlcIiksIHJlcXVpcmUoXCJ0aXBweS5qc1wiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wibm9kZWxpbmtfdmlzX2NvYXV0aG9yc2hpcFwiXSA9IGZhY3Rvcnkocm9vdFtcImQzXCJdLCByb290W1wialF1ZXJ5XCJdLCByb290W1widGlwcHlcIl0pO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX181X18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzFfXzsiLCJpbXBvcnQgTm9kZUxpbmtDb2F1dGhvcnNoaXBWaXMgZnJvbSAnLi92aXMuanMnO1xuaW1wb3J0IGFjdGl2YXRlVG9vbHRpcHMgZnJvbSAnLi9jb2F1dGhvcnNoaXBfdG9vbHRpcHMuanMnO1xuZXhwb3J0IHsgTm9kZUxpbmtDb2F1dGhvcnNoaXBWaXMsIGFjdGl2YXRlVG9vbHRpcHMgfTtcblxuIiwiLy8gTm9kZUxpbmtDb2F1dGhvcnNoaXBWaXNcblxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuY29uc3QgJCA9IGpRdWVyeTtcblxuXG5cbi8vIHJldXNhYmxlIGNoYXJ0IHBhdHRlcm4gaW5zcGlyZWQgYnk6XG4vLyBodHRwczovL2Jvc3Qub2Nrcy5vcmcvbWlrZS9jaGFydC9cbi8vIGFuZFxuLy8gaHR0cHM6Ly93d3cudG9wdGFsLmNvbS9kMy1qcy90b3dhcmRzLXJldXNhYmxlLWQzLWpzLWNoYXJ0c1xuY2xhc3MgTm9kZUxpbmtDb2F1dGhvcnNoaXBWaXMge1xuXHRjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcblx0XHRjb25zdCBkZWZhdWx0cyA9IHtcblx0XHRcdGVsOiBudWxsLFxuXHRcdFx0ZGF0YTogbnVsbCxcblx0XHRcdHdpZHRoOiA5NjAsXG5cdFx0XHRjb2xvcjogZDMuc2NhbGVPcmRpbmFsKGQzLnNjaGVtZUNhdGVnb3J5MTApLFxuXHRcdFx0Zm9yY2VTdHJlbmd0aDogLTIsXG5cdFx0fTtcblx0XHRPYmplY3QuYXNzaWduKHRoaXMsIGRlZmF1bHRzLCBvcHRzKTsgIC8vIG9wdHMgd2lsbCBvdmVyd3JpdGUgZGVmYXVsdHNcblx0XHR0aGlzLl9kYXRhID0gdGhpcy5kYXRhO1xuXHRcdHRoaXMuZGF0YSA9IHRoaXMudXBkYXRlRGF0YTtcblx0XHRpZiAodHlwZW9mIHRoaXMuaGVpZ2h0ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0dGhpcy5oZWlnaHQgPSAuNjI1ICogdGhpcy53aWR0aDtcblx0XHR9XG5cdFx0dGhpcy5tYW55Qm9keSA9IGQzLmZvcmNlTWFueUJvZHkoKVxuXHRcdFx0XHRcdFx0XHQuc3RyZW5ndGgodGhpcy5mb3JjZVN0cmVuZ3RoKTtcblx0XHR0aGlzLmluaXQgPSBmYWxzZTtcblx0XHRjb25zb2xlLmxvZyh0aGlzLl9kYXRhKTtcblx0XHRpZiAodGhpcy5lbCAhPT0gbnVsbCAmJiB0aGlzLl9kYXRhICE9PSBudWxsKSB7XG5cdFx0XHR0aGlzLmRyYXcodGhpcy5lbCk7XG5cdFx0XHR0aGlzLmluaXQgPSB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdGdldExpbmtJZChsaW5rLCBkaXJlY3RlZCA9IGZhbHNlKSB7XG5cdFx0Ly8gbGluayBJRCB3aWxsIGJlIHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZSBzb3VyY2UgSUQgYW5kIHRhcmdldCBJRCwgc2VwYXJhdGVkIGJ5IFwiLSYtXCJcblx0XHQvLyBJZiB0aGUgZ3JhcGggaXMgdW5kaXJlY3RlZCwgdGhlIElEcyB3aWxsIGJlIHNvcnRlZCBBTFBIQUJFVElDQUxMWSB1c2luZyB0aGUgc3RyaW5nIHZhbHVlcyBvZiB0aGUgSURcblx0XHR2YXIgc291cmNlID0gbGluay5zb3VyY2UudG9TdHJpbmcoKTtcblx0XHR2YXIgdGFyZ2V0ID0gbGluay50YXJnZXQudG9TdHJpbmcoKTtcblx0XHR2YXIgaXRlbXMgPSBbc291cmNlLCB0YXJnZXRdO1xuXHRcdHZhciBzZXAgPSBcIi0mLVwiO1xuXHRcdGlmIChkaXJlY3RlZCA9PT0gdHJ1ZSkge1xuXHRcdFx0aXRlbXMuc29ydCgpO1xuXHRcdH1cblx0XHRyZXR1cm4gaXRlbXNbMF0gKyBzZXAgKyBpdGVtc1sxXTtcblx0fVxuXG5cdHVwZGF0ZURhdGEodmFsdWUpIHtcblx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9kYXRhO1xuXHRcdHRoaXMuX2RhdGEgPSB2YWx1ZTtcblx0XHRpZiAodGhpcy5pbml0ID09PSBmYWxzZSkge1xuXHRcdFx0dGhpcy5kcmF3KHRoaXMuZWwpO1xuXHRcdFx0dGhpcy5pbml0ID0gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gdGhpcy51cGRhdGVEYXRhKCk7XG5cdFx0XHQvLyBOT1QgSU1QTEVNRU5URURcblx0XHRcdGNvbnNvbGUubG9nKFwiVVBEQVRJTkcgREFUQSBOT1QgWUVUIElNUExFTUVOVEVEXCIpO1xuXHRcdH1cblx0XHQvLyBjb25zb2xlLmxvZyh0eXBlb2YgdXBkYXRlRGF0YSk7XG5cdFx0Ly8gaWYgKHR5cGVvZiB1cGRhdGVEYXRhID09PSAnZnVuY3Rpb24nKSB1cGRhdGVEYXRhKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0ZHJhdyhzZWxlY3Rpb24pIHtcblx0XHR2YXIgb2JqID0gdGhpcztcblx0XHR2YXIgd2lkdGggPSB0aGlzLndpZHRoO1xuXHRcdHZhciBoZWlnaHQgPSB0aGlzLmhlaWdodDtcblx0XHR2YXIgZ3JhcGggPSB0aGlzLl9kYXRhO1xuXHRcdHZhciBtYW55Qm9keSA9IHRoaXMubWFueUJvZHk7XG5cdFx0dmFyIGNvbG9yID0gdGhpcy5jb2xvcjtcblx0XHR2YXIgZ2V0TGlua0lkID0gdGhpcy5nZXRMaW5rSWQ7XG5cdFx0c2VsZWN0aW9uLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsSXRlbSA9IHRoaXM7XG5cblx0XHRcdHZhciBzdmcgPSBkMy5zZWxlY3Qoc2VsSXRlbSkuYXBwZW5kKFwic3ZnXCIpLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aCkuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpO1xuXHRcdFx0Y29uc29sZS5sb2coZ3JhcGgpO1xuXG5cdFx0XHRmdW5jdGlvbiBkcmFnc3RhcnRlZChkKSB7XG5cdFx0XHRcdGlmICghZDMuZXZlbnQuYWN0aXZlKSBzaW11bGF0aW9uLmFscGhhVGFyZ2V0KDAuMykucmVzdGFydCgpO1xuXHRcdFx0XHRkLmZ4ID0gZC54O1xuXHRcdFx0XHRkLmZ5ID0gZC55O1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBkcmFnZ2VkKGQpIHtcblx0XHRcdFx0ZC5meCA9IGQzLmV2ZW50Lng7XG5cdFx0XHRcdGQuZnkgPSBkMy5ldmVudC55O1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBkcmFnZW5kZWQoZCkge1xuXHRcdFx0XHRpZiAoIWQzLmV2ZW50LmFjdGl2ZSkgc2ltdWxhdGlvbi5hbHBoYVRhcmdldCgwKTtcblx0XHRcdFx0ZC5meCA9IG51bGw7XG5cdFx0XHRcdGQuZnkgPSBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBlbnRlck5vZGVzKG5vZGUsIHQgPSBudWxsKSB7XG5cdFx0XHRcdC8vIHBhc3MgaW4gdGhlIHNlbGVjdGlvbiBmb3IgZW50ZXJpbmcgbm9kZXNcblxuXHRcdFx0XHR2YXIgZGVmYXVsdENvbG9yID0gY29sb3IoMCk7XG5cblx0XHRcdFx0c2l6ZVNjYWxlLmRvbWFpbihkMy5leHRlbnQoZ3JhcGgubm9kZXMsIGZ1bmN0aW9uKGQpIHtcblx0XHRcdFx0XHRpZiAoZC5oYXNPd25Qcm9wZXJ0eSgnZmxvdycpKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZC5mbG93O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWzUsNV1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pKTtcblx0XHRcdFx0Y29uc29sZS5sb2coc2l6ZVNjYWxlLmRvbWFpbigpKTtcblxuXG5cdFx0XHRcdHZhciBub2RlRW50ZXIgPSBub2RlLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxuXHRcdFx0XHQvLyAuYXR0cihcInJcIiwgNSlcblx0XHRcdFx0XHQuYXR0cihcImNsYXNzXCIsIFwibm9kZVwiKVxuXHRcdFx0XHRcdC8vIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcblx0XHRcdFx0XHQvLyBcdHZhciB0eCA9ICh3aWR0aC8yKSArIGQueDtcblx0XHRcdFx0XHQvLyBcdHZhciB0eSA9IChoZWlnaHQvMikgKyBkLnk7XG5cdFx0XHRcdFx0Ly8gXHRyZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB0eCArIFwiLFwiICsgdHkgKyBcIilcIjtcblx0XHRcdFx0XHQvLyB9KVxuXHRcdFx0XHRcdC5jYWxsKGQzLmRyYWcoKVxuXHRcdFx0XHRcdFx0Lm9uKFwic3RhcnRcIiwgZHJhZ3N0YXJ0ZWQpXG5cdFx0XHRcdFx0XHQub24oXCJkcmFnXCIsIGRyYWdnZWQpXG5cdFx0XHRcdFx0XHQub24oXCJlbmRcIiwgZHJhZ2VuZGVkKSk7XG5cblxuXG5cdFx0XHRcdG5vZGUgPSBub2RlLm1lcmdlKG5vZGVFbnRlcilcblx0XHRcdFx0XHQuYXR0cihcImN4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueCA9ICh3aWR0aC8yKSArIGQueDsgfSlcblx0XHRcdFx0XHQuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueSA9IChoZWlnaHQvMikgKyBkLnk7IH0pXG5cdFx0XHRcdFx0LmVhY2goZnVuY3Rpb24oZCkge1xuXHRcdFx0XHRcdFx0aWYgKGQuaGFzT3duUHJvcGVydHkoJ2Zsb3cnKSkge1xuXHRcdFx0XHRcdFx0XHRkLnJhZGl1cyA9IHNpemVTY2FsZShkLmZsb3cpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZC5yYWRpdXMgPSA1O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoZC5oYXNPd25Qcm9wZXJ0eShcImNvbG9yX2dyb3VwXCIpKSB7XG5cdFx0XHRcdFx0XHRcdGQuY29sb3IgPSBjb2xvcihkLmNvbG9yX2dyb3VwKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoZC5oYXNPd25Qcm9wZXJ0eShcImNsX3RvcFwiKSkge1xuXHRcdFx0XHRcdFx0XHRkLmNvbG9yID0gY29sb3IoZC5jbF90b3ApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZC5jb2xvciA9IGRlZmF1bHRDb2xvcjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHR2YXIgbm9kZUNpcmNsZSA9IG5vZGVFbnRlclxuXHRcdFx0XHRcdC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjsgfSlcblx0XHRcdFx0XHQuYXBwZW5kKFwiY2lyY2xlXCIpXG5cdFx0XHRcdFx0Ly8gLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueDsgfSlcblx0XHRcdFx0XHQvLyAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC55OyB9KVxuXHRcdFx0XHRcdC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLmNvbG9yOyB9KVxuXHRcdFx0XHRcdC5hdHRyKFwiclwiLCAwKTtcblxuXHRcdFx0XHRpZiAodCAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdC8vIG5vZGVFbnRlci5lYWNoKGZ1bmN0aW9uKGQpIHtcblx0XHRcdFx0XHQvLyBcdGQueCA9IHdpZHRoLzI7XG5cdFx0XHRcdFx0Ly8gXHRkLnkgPSBoZWlnaHQvMjtcblx0XHRcdFx0XHQvLyB9KTtcblx0XHRcdFx0XHRub2RlXG5cdFx0XHRcdFx0XHQuc2VsZWN0QWxsKFwiY2lyY2xlXCIpLnRyYW5zaXRpb24odClcblx0XHRcdFx0XHRcdC5hdHRyKFwiclwiLCBmdW5jdGlvbihkKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBkLnJhZGl1cztcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0Ly8gLmF0dHIoXCJmaWxsXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuY29sb3Jfb3JpZyA9IGNvbG9yKGQuY2xfdG9wKTsgfSk7XG5cdFx0XHRcdFx0XHQuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24oZCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZC5jb2xvcjtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0bm9kZS5zZWxlY3RBbGwoXCJjaXJjbGVcIilcblx0XHRcdFx0XHRcdC5hdHRyKFwiclwiLCBmdW5jdGlvbihkKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBkLnJhZGl1cztcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0Ly8gLmF0dHIoXCJmaWxsXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuY29sb3Jfb3JpZyA9IGNvbG9yKGQuY2xfdG9wKTsgfSk7XG5cdFx0XHRcdFx0XHQuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24oZCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZC5jb2xvcjtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGVudGVyTGlua3MobGluaywgdCA9IG51bGwpIHtcblx0XHRcdFx0Ly8gcGFzcyBpbiB0aGUgc2VsZWN0aW9uIGZvciBlbnRlcmluZyBsaW5rc1xuXHRcdFx0XHRcblx0XHRcdFx0XG5cdFx0XHRcdHZhciBsaW5rRW50ZXIgPSBsaW5rLmVudGVyKCkuYXBwZW5kKFwibGluZVwiKVxuXHRcdFx0XHRcdC5hdHRyKFwieDFcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5zb3VyY2UueDsgfSlcblx0XHRcdFx0XHQuYXR0cihcInkxXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuc291cmNlLnk7IH0pXG5cdFx0XHRcdFx0LmF0dHIoXCJ4MlwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnRhcmdldC54OyB9KVxuXHRcdFx0XHRcdC5hdHRyKFwieTJcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQueTsgfSlcblx0XHRcdFx0XHQuYXR0cihcImNsYXNzXCIsIFwibGlua1wiKTtcblx0XHRcdFx0bGluayA9IGxpbmsubWVyZ2UobGlua0VudGVyKTtcblx0XHRcdFx0bGlua1xuXHRcdFx0XHQgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIE1hdGguc3FydChkLndlaWdodCk7IH0pO1xuXG5cdFx0XHRcdGlmICh0ICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0bGlua0VudGVyXG5cdFx0XHRcdFx0XHQvLyAuc3R5bGUoXCJvcGFjaXR5XCIsIDApXG5cdFx0XHRcdFx0XHQuc3R5bGUoXCJzdHJva2VcIiwgXCJncmVlblwiKVxuXHRcdFx0XHRcdC8vIGxpbmtFbnRlci50cmFuc2l0aW9uKHQpXG5cdFx0XHRcdFx0Ly8gXHQuc3R5bGUoXCJvcGFjaXR5XCIsIDEpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbGluaztcblx0XHRcdH1cblxuXG5cdFx0XHRncmFwaC5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGQpIHtcblx0XHRcdFx0ZC5pZCA9IGQuaWQudG9TdHJpbmcoKTtcblx0XHRcdH0pO1xuXHRcdFx0Z3JhcGgubGlua3MuZm9yRWFjaChmdW5jdGlvbihkKSB7XG5cdFx0XHRcdGQuaWQgPSBnZXRMaW5rSWQoZCwgZ3JhcGguZGlyZWN0ZWQpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHZhciBzaW11bGF0aW9uID0gZDMuZm9yY2VTaW11bGF0aW9uKClcblx0XHRcdFx0LmZvcmNlKFwibGlua1wiLCBkMy5mb3JjZUxpbmsoKS5pZChmdW5jdGlvbihkKSB7IHJldHVybiBkLmlkOyB9KSlcblx0XHRcdFx0Ly8gLmZvcmNlKFwibGlua1wiLCBkMy5mb3JjZUxpbmsoKSlcblx0XHRcdFx0LmZvcmNlKFwiY2hhcmdlXCIsIG1hbnlCb2R5KVxuXHRcdFx0XHQuZm9yY2UoXCJjZW50ZXJcIiwgZDMuZm9yY2VDZW50ZXIod2lkdGggLyAyLCBoZWlnaHQgLyAyKSk7XG5cblx0XHQgIHNpbXVsYXRpb25cblx0XHRcdCAgLm5vZGVzKGdyYXBoLm5vZGVzKVxuXHRcdFx0ICAub24oXCJ0aWNrXCIsIHRpY2tlZCk7XG5cblx0XHQgIHNpbXVsYXRpb24uZm9yY2UoXCJsaW5rXCIpXG5cdFx0XHQgIC5saW5rcyhncmFwaC5saW5rcyk7XG5cblx0XHQgIHRoaXMuc2ltdWxhdGlvbiA9IHNpbXVsYXRpb247XG5cblx0XHRcdHZhciBzaXplU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG5cdFx0XHRcdC5yYW5nZShbNCwgMTJdKTtcblxuXG5cdFx0XHR2YXIgZyA9IHN2Zy5hcHBlbmQoXCJnXCIpO1xuXG5cdFx0ICB2YXIgbGluayA9IGcuYXBwZW5kKFwiZ1wiKVxuXHRcdFx0ICAuYXR0cihcImNsYXNzXCIsIFwibGlua3NcIilcblx0XHRcdC8vIC5zZWxlY3RBbGwoXCJsaW5lXCIpXG5cdFx0XHQuc2VsZWN0QWxsKFwiLmxpbmtcIik7XG5cblx0XHRcdGxpbmsgPSBsaW5rLmRhdGEoZ3JhcGgubGlua3MsIGZ1bmN0aW9uKGQpIHtcblx0XHRcdFx0cmV0dXJuIGQuaWQ7XG5cdFx0XHR9KTtcblxuXHRcdCAgdmFyIG5vZGUgPSBnLmFwcGVuZChcImdcIilcblx0XHRcdCAgLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVzXCIpXG5cdFx0XHQuc2VsZWN0QWxsKFwiLm5vZGVcIik7XG5cblx0XHRcdG5vZGUgPSBub2RlLmRhdGEoZ3JhcGgubm9kZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuaWQ7IH0pO1xuXG5cdFx0XHRub2RlID0gZW50ZXJOb2Rlcyhub2RlKTtcblx0XHRcdGxpbmsgPSBlbnRlckxpbmtzKGxpbmspO1xuXG5cblx0XHRcdC8vIG5vZGVDaXJjbGUub24oJ2NsaWNrJywgZnVuY3Rpb24oZCkge1xuXHRcdFx0Ly8gXHRub2RlLmNsYXNzZWQoJ2ZvY3VzJywgZmFsc2UpO1xuXHRcdFx0Ly8gXHRub2RlLnNlbGVjdEFsbChcInRleHRcIikuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcblx0XHRcdC8vIFx0bm9kZUNpcmNsZS5hdHRyKFwiZmlsbFwiLCBcImJsYWNrXCIpXG5cdFx0XHQvLyBcdFx0LnN0eWxlKFwib3BhY2l0eVwiLCAuMSk7XG5cdFx0XHQvLyBcdGxpbmsuc3R5bGUoXCJvcGFjaXR5XCIsIC4xKTtcblx0XHRcdC8vIFx0dmFyIGNvbXBvbmVudF9pZHMgPSBncmFwaC5ncmFwaC5jb25uZWN0ZWRfY29tcG9uZW50c1tkLmNvbXBvbmVudF07XG5cdFx0XHQvLyBcdHZhciBjb21wb25lbnQgPSBub2RlLmZpbHRlcihmdW5jdGlvbihkKSB7cmV0dXJuIGNvbXBvbmVudF9pZHMuaW5jbHVkZXMoZC5pZCk7IH0pO1xuXHRcdFx0Ly8gXHR2YXIgY29tcG9uZW50TGluayA9IGxpbmsuZmlsdGVyKGZ1bmN0aW9uKGQpIHtyZXR1cm4gY29tcG9uZW50X2lkcy5pbmNsdWRlcyhkLnNvdXJjZS5pZCk7fSlcblx0XHRcdC8vIFx0dmFyIGNvbXBvbmVudENvbG9yID0gZDMuc2NhbGVPcmRpbmFsKGQzLnNjaGVtZUNhdGVnb3J5MTApO1xuXHRcdFx0Ly8gXHRjb21wb25lbnQuY2xhc3NlZChcImZvY3VzXCIsIHRydWUpO1xuXHRcdFx0Ly8gXHRjb21wb25lbnQuc2VsZWN0QWxsKFwiY2lyY2xlXCIpLmF0dHIoXCJmaWxsXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGNvbXBvbmVudENvbG9yKGQuY2xfYm90dG9tKTsgfSlcblx0XHRcdC8vIFx0XHQuc3R5bGUoXCJvcGFjaXR5XCIsIDEpO1xuXHRcdFx0Ly8gXHRjb21wb25lbnQuc2VsZWN0QWxsKFwidGV4dFwiKS5zdHlsZShcImRpc3BsYXlcIiwgXCJcIik7ICAvLyBzaG93IHRoZXNlIGxhYmVsc1xuXHRcdFx0Ly8gXHRjb21wb25lbnRMaW5rLnN0eWxlKFwib3BhY2l0eVwiLCAxKTtcblx0XHRcdC8vIFx0XG5cdFx0XHQvLyBcdCQoICcjbm9kZWxhYi1mb3JtJyApLmNzcyggJ3Zpc2liaWxpdHknICwgJ3Zpc2libGUnICk7XG5cdFx0XHQvLyBcdGFwcGx5UmFkaW9TZWxlY3Rpb24oKTtcblx0XHRcdC8vXG5cdFx0XHQvLyBcdGQzLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0Ly9cblx0XHRcdC8vIH0pO1xuXG5cblxuXHRcdCAgZnVuY3Rpb24gdGlja2VkKCkge1xuXHRcdFx0Ly8gbm9kZVxuXHRcdFx0Ly8gICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC54OyB9KVxuXHRcdFx0Ly8gICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC55OyB9KTtcblx0XHRcdC8vIGFkZCBib3VuZGluZyBib3hcblx0XHRcdC8vICAgaHR0cHM6Ly9ibC5vY2tzLm9yZy9tYm9zdG9jay8xMTI5NDkyXG5cdFx0XHRub2RlXG5cdFx0XHRcdC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkgeyBcblx0XHRcdFx0XHRkLnggPSBNYXRoLm1heChkLnJhZGl1cywgTWF0aC5taW4od2lkdGggLSBkLnJhZGl1cywgZC54KSk7XG5cdFx0XHRcdFx0cmV0dXJuIGQueDsgfSlcblx0XHRcdFx0LmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkKSB7IFxuXHRcdFx0XHRcdGQueSA9IE1hdGgubWF4KGQucmFkaXVzLCBNYXRoLm1pbih3aWR0aCAtIGQucmFkaXVzLCBkLnkpKTtcblx0XHRcdFx0XHRyZXR1cm4gZC55OyB9KVxuXHRcdFx0XHQuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArIGQueCArIFwiLFwiICsgZC55ICsgXCIpXCI7IH0pO1xuXG5cdFx0XHRsaW5rXG5cdFx0XHRcdC8vIC5zZWxlY3RBbGwoXCJsaW5lXCIpXG5cdFx0XHRcdC5hdHRyKFwieDFcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5zb3VyY2UueDsgfSlcblx0XHRcdFx0LmF0dHIoXCJ5MVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnNvdXJjZS55OyB9KVxuXHRcdFx0XHQuYXR0cihcIngyXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudGFyZ2V0Lng7IH0pXG5cdFx0XHRcdC5hdHRyKFwieTJcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQueTsgfSk7XG5cdFx0ICB9XG5cblx0XHRcdGZ1bmN0aW9uIHJlc2V0X2xheW91dCgpIHtcblx0XHRcdFx0bm9kZS5jbGFzc2VkKFwiZm9jdXNcIiwgZmFsc2UpO1xuXHRcdFx0XHRub2RlLnNlbGVjdEFsbChcInRleHRcIikuc3R5bGUoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcblx0XHRcdFx0Ly8gbm9kZUNpcmNsZS5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLmNvbG9yX29yaWc7IH0pXG5cdFx0XHRcdC8vIFx0LnN0eWxlKFwib3BhY2l0eVwiLCAxKTtcblx0XHRcdFx0bGluay5zdHlsZShcIm9wYWNpdHlcIiwgMSk7XG5cdFx0XHRcdCQoICcjbm9kZWxhYi1mb3JtJyApLmNzcyggJ3Zpc2liaWxpdHknICwgJ2hpZGRlbicgKTtcblx0XHRcdH1cblx0XHRcdHN2Zy5vbihcImNsaWNrXCIsIHJlc2V0X2xheW91dCk7XG5cblx0XHRcdC8vIFRPRE8gdGhpcyBpcyBicm9rZW4uIGZpeCBpdC5cblx0XHRcdC8vIHZhciBmdXNlID0gbmV3IEZ1c2UoZ3JhcGgubm9kZXMsIGZ1c2VPcHRpb25zKTtcblx0XHRcdC8vIHZhciByZXN1bHQgPSBmdXNlLnNlYXJjaChcImVobG93XCIpO1xuXHRcdFx0Ly8gY29uc29sZS5sb2cocmVzdWx0KTtcblx0XHRcdC8vICQoICcjdGV4dFNlYXJjaCcgKS5vbiggJ2lucHV0JywgZnVzZVNlbGVjdCApO1xuXHRcdFx0Ly8gZnVuY3Rpb24gZnVzZVNlbGVjdCgpIHtcblx0XHRcdC8vIFx0Ly8gcmVzZXQgbm9kZSBzaXplcyBhbmQgc3R5bGVzXG5cdFx0XHQvLyBcdGQzLnNlbGVjdEFsbChcIi5ub2RlIGNpcmNsZVwiKVxuXHRcdFx0Ly8gXHRcdC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCAxKVxuXHRcdFx0Ly8gXHRcdC5zdHlsZShcInN0cm9rZVwiLCBcIndoaXRlXCIpXG5cdFx0XHQvLyBcdFx0LmF0dHIoXCJyXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQucmFkaXVzOyB9KTtcbiAgICAgICAgICAgIC8vXG5cdFx0XHQvLyBcdHZhciAkdGhpcyA9ICQoIHRoaXMgKTtcblx0XHRcdC8vIFx0dmFyIHF1ZXJ5ID0gJHRoaXMudmFsKCk7XG5cdFx0XHQvLyBcdGNvbnNvbGUubG9nKCR0aGlzLnZhbCgpKTtcblx0XHRcdC8vIFx0aWYgKHF1ZXJ5Lmxlbmd0aCA+IDMpIHtcblx0XHRcdC8vIFx0XHR2YXIgcmVzdWx0ID0gZnVzZS5zZWFyY2gocXVlcnkpO1xuXHRcdFx0Ly8gXHRcdGlmIChyZXN1bHQubGVuZ3RoICE9MCkge1xuXHRcdFx0Ly8gXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGxlbiA9IHJlc3VsdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0Ly8gXHRcdFx0XHR2YXIgYXV0aG9ySWQgPSByZXN1bHRbaV07XG5cdFx0XHQvLyBcdFx0XHRcdG5vZGUuZmlsdGVyKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuaWQgPT0gYXV0aG9ySWQ7IH0pXG5cdFx0XHQvLyBcdFx0XHRcdFx0LnNlbGVjdChcImNpcmNsZVwiKVxuXHRcdFx0Ly8gXHRcdFx0XHRcdC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCAyKVxuXHRcdFx0Ly8gXHRcdFx0XHRcdC5zdHlsZShcInN0cm9rZVwiLCBcImJsYWNrXCIpXG5cdFx0XHQvLyBcdFx0XHRcdFx0LmF0dHIoXCJyXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQucmFkaXVzICogMS41OyB9KTtcblx0XHRcdC8vIFx0XHRcdH1cblx0XHRcdC8vIFx0XHR9XG5cdFx0XHQvLyBcdH1cblx0XHRcdC8vIH1cblxuXHRcdFx0Ly8gdXBkYXRlV2lkdGggPSBmdW5jdGlvbigpIHtcblx0XHRcdC8vIFx0Ly8gdXNlIHdpZHRoIHRvIG1ha2UgYW55IGNoYW5nZXNcblx0XHRcdC8vIFx0Ly9cblx0XHRcdC8vIFx0Ly8gTk9UIElNUExFTUVOVEVEXG5cdFx0XHQvLyB9O1xuXG5cblxuXG5cdFx0fSk7XG5cdHJldHVybiB0aGlzO1xuXHR9XG5cblx0Ly8gdXBkYXRlRGF0YSgpIHtcblx0Ly8gXHQvLyB1c2UgRDMgdXBkYXRlIHBhdHRlcm4gd2l0aCBkYXRhXG4gICAgLy9cblx0Ly8gXHR2YXIgZ3JhcGggPSB0aGlzLl9kYXRhO1xuXHQvLyBcdGdyYXBoLm5vZGVzLmZvckVhY2goZnVuY3Rpb24oZCkge1xuXHQvLyBcdFx0ZC5pZCA9IGQuaWQudG9TdHJpbmcoKTtcblx0Ly8gXHR9KVxuXHQvLyBcdGdyYXBoLmxpbmtzLmZvckVhY2goZnVuY3Rpb24oZCkge1xuXHQvLyBcdFx0ZC5pZCA9IGdldExpbmtJZChkLCBncmFwaC5kaXJlY3RlZCk7XG5cdC8vIFx0fSk7XG5cdC8vIFx0dGhpcy5zaW11bGF0aW9uXG5cdC8vIFx0XHQubm9kZXMoZ3JhcGgubm9kZXMpXG5cdC8vIFx0XHQub24oXCJ0aWNrXCIsIHRpY2tlZCk7XG4gICAgLy9cblx0Ly8gXHRzaW11bGF0aW9uLmZvcmNlKFwibGlua1wiKVxuXHQvLyBcdFx0LmxpbmtzKGdyYXBoLmxpbmtzKTtcblx0Ly8gXHRjb25zb2xlLmxvZyhncmFwaCk7XG5cdC8vIFx0c2ltdWxhdGlvbi5zdG9wKCk7XG5cdC8vIFx0bm9kZSA9IG5vZGUuZGF0YShncmFwaC5ub2RlcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5pZDsgfSk7XG5cdC8vIFx0dmFyIG5vZGVFeGl0ID0gbm9kZS5leGl0KCk7XG5cdC8vIFx0Ly8gbm9kZUV4aXQuc2VsZWN0QWxsKFwiY2lyY2xlXCIpLmF0dHIoXCJmaWxsXCIsIFwicmVkXCIpO1xuXHQvLyBcdHZhciB0ID0gZDMudHJhbnNpdGlvbigndXBkYXRlRGF0YScpLmR1cmF0aW9uKDUwMDApO1xuXHQvLyBcdG5vZGVFeGl0LnNlbGVjdEFsbChcImNpcmNsZVwiKS5zdHlsZShcInN0cm9rZVwiLCBcInJlZFwiKS50cmFuc2l0aW9uKHQpLmF0dHIoXCJyXCIsIDApO1xuXHQvLyBcdG5vZGUgPSBlbnRlck5vZGVzKG5vZGUsIHQpO1xuXHQvLyBcdC8vIG5vZGUgPSBub2RlLmNhbGwoZW50ZXJOb2RlcywgdCk7XG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG5cdC8vIFx0bGluayA9IGxpbmtcblx0Ly8gXHRcdC5kYXRhKGdyYXBoLmxpbmtzLCBmdW5jdGlvbihkKSB7XG5cdC8vIFx0XHRcdC8vIGQuaWQgPSBnZXRMaW5rSWQoZCk7XG5cdC8vIFx0XHRcdHJldHVybiBkLmlkO1xuXHQvLyBcdFx0fSk7XG5cdC8vIFx0dmFyIGxpbmtFeGl0ID0gbGluay5leGl0KCk7XG5cdC8vIFx0bGlua0V4aXQuc3R5bGUoXCJzdHJva2VcIiwgXCJyZWRcIikudHJhbnNpdGlvbih0KS5zdHlsZShcIm9wYWNpdHlcIiwgMCkucmVtb3ZlKCk7XG5cdC8vIFx0Ly8gbGlua0V4aXQucmVtb3ZlKCk7XG5cdC8vIFx0bGluayA9IGVudGVyTGlua3MobGluaywgdCk7XG5cdC8vIFx0c2ltdWxhdGlvbi5vbihcInRpY2tcIikuY2FsbCgpO1xuICAgIC8vXG4gICAgLy9cblx0Ly8gXHR0LmVuZCgpLnRoZW4oZnVuY3Rpb24oZCkge1xuXHQvLyBcdFx0bm9kZUV4aXQucmVtb3ZlKCk7XG5cdC8vIFx0XHQvLyBzaW11bGF0aW9uLmFscGhhKDEpLnJlc3RhcnQoKTtcblx0Ly8gXHRcdC8vIHNpbXVsYXRpb25cblx0Ly8gXHRcdFx0Ly8gLmFscGhhRGVjYXkoLjAwMDUpXG5cdC8vIFx0XHRcdC8vIC52ZWxvY2l0eURlY2F5KDAuOSlcblx0Ly8gXHRcdFx0Ly8gLmFscGhhKC4xKVxuXHQvLyBcdFx0XHQvLyAucmVzdGFydCgpO1xuXHQvLyBcdH0pO1xuXHQvLyBcdFxuXHQvLyBcdC8vIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdC8vIFx0Ly8gfSwgNDAwMCk7XG5cdC8vIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm9kZUxpbmtDb2F1dGhvcnNoaXBWaXM7XG4iLCJpbXBvcnQgdGlwcHkgZnJvbSAndGlwcHkuanMnO1xuLy8gY29uc3QgdGlwcHkgPSByZXF1aXJlKCcuLi9ub2RlX21vZHVsZXMvdGlwcHkuanMvJyk7XG5pbXBvcnQgJ3RpcHB5LmpzL3RoZW1lcy9saWdodC1ib3JkZXIuY3NzJztcblxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuY29uc3QgJCA9IGpRdWVyeTtcblxuZXhwb3J0IGRlZmF1bHQgYWN0aXZhdGVUb29sdGlwcztcblxudGlwcHkuc2V0RGVmYXVsdHMoe1xuXHQndGhlbWUnOiAnbGlnaHQtYm9yZGVyJyxcblx0J2FuaW1hdGVGaWxsJzogZmFsc2UsXG5cdCdhbmltYXRpb24nOiAnZmFkZScsXG59KTtcbmNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rvb2x0aXAtdGVtcGxhdGUnKTtcblxuZnVuY3Rpb24gYWN0aXZhdGVUb29sdGlwcygpIHtcblx0Y29uc29sZS5sb2coJ2FjdGl2YXRlVG9vbHRpcHMoKScpO1xuXG5cdGZ1bmN0aW9uIGZpbGxIdG1sKCR0ZW1wbGF0ZSwgY2xhc3NuYW1lLCB0ZXh0Q29udGVudCkge1xuXHRcdCR0ZW1wbGF0ZS5maW5kKCAnLicgKyBjbGFzc25hbWUgKS5maW5kKCAnLnRlbXBsYXRlLWNvbnRlbnQnICkudGV4dCh0ZXh0Q29udGVudCk7XG5cdH1cblxuXHRkMy5zZWxlY3RBbGwoJy5ub2RlIGNpcmNsZScpLmVhY2goZnVuY3Rpb24oZCkge1xuXHRcdHZhciAkdG9vbHRpcE5vZGUgPSAkKHRlbXBsYXRlKS5jbG9uZSgpLmF0dHIoXCJpZFwiLCBudWxsKTtcblx0XHRpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShcIl90aXBweVwiKSkge1xuXHRcdFx0dmFyIHRpcHB5SW5zdGFuY2UgPSB0aGlzLl90aXBweTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHRpcHB5SW5zdGFuY2UgPSB0aXBweSh0aGlzKTtcblx0XHR9XG5cdFx0ZmlsbEh0bWwoJHRvb2x0aXBOb2RlLCAnYXV0aG9yX25hbWUnLCBkLmF1dGhvcl9uYW1lKTtcblx0XHRpZiAoZC5oYXNPd25Qcm9wZXJ0eSgnYWZmaWxfbmFtZScpICYmIGQuYWZmaWxfbmFtZS5sZW5ndGgpIHtcblx0XHRcdGZpbGxIdG1sKCR0b29sdGlwTm9kZSwgJ2FmZmlsX25hbWUnLCBkLmFmZmlsX25hbWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkdG9vbHRpcE5vZGUuZmluZCgnLmFmZmlsX25hbWUnKS5oaWRlKCk7XG5cdFx0fVxuXHRcdC8vIGlmIChkLmhhc093blByb3BlcnR5KCdjbF9ib3R0b20nKSkgZmlsbEh0bWwoJHRvb2x0aXBOb2RlLCAnY2x1c3Rlcl9pZCcsIGQuY2xfYm90dG9tKTtcblx0XHR2YXIgJHBhcGVyVGl0bGVzID0gJHRvb2x0aXBOb2RlLmZpbmQoICcucGFwZXJfdGl0bGVzJyApLmZpbmQoICcudGVtcGxhdGUtY29udGVudCcgKTtcblx0XHR2YXIgcGFwZXJzID0gZC5wYXBlcnM7XG5cdFx0Ly8gc29ydCBwYXBlcnMgYWxwaGFiZXRpY2FsbHlcblx0XHRwYXBlcnMuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBkMy5hc2NlbmRpbmcoYS50aXRsZSwgYi50aXRsZSk7IH0pO1xuXHRcdGZvciAodmFyIGkgPSAwLCBsZW4gPSBwYXBlcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdHZhciAkbGlzdEl0ZW0gPSAkKCAnPGxpIGNsYXNzPVwicGFwZXJfdGl0bGVcIj4nICkudGV4dChwYXBlcnNbaV0udGl0bGUpO1xuXHRcdFx0JHBhcGVyVGl0bGVzLmFwcGVuZCggJGxpc3RJdGVtICk7XG5cdFx0fVxuXHRcdHRpcHB5SW5zdGFuY2Uuc2V0Q29udGVudCgkdG9vbHRpcE5vZGUuaHRtbCgpKTtcblx0fSk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzVfXzsiXSwic291cmNlUm9vdCI6IiJ9