!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3"),require("jQuery"),require("tippy.js")):"function"==typeof define&&define.amd?define("nodelink_vis_coauthorship",["d3","jQuery","tippy.js"],e):"object"==typeof exports?exports.nodelink_vis_coauthorship=e(require("d3"),require("jQuery"),require("tippy.js")):t.nodelink_vis_coauthorship=e(t.d3,t.jQuery,t.tippy)}("undefined"!=typeof self?self:this,function(t,e,n){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"NodeLinkCoauthorshipVis",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(e,"activateTooltips",{enumerable:!0,get:function(){return o.default}});var r=i(n(3)),o=i(n(4));function i(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,o=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}(n(0));function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var a=((r=n(1))&&r.__esModule?r:{default:r}).default,u=function(){var t,e,n=[],r=960,u=o.scaleOrdinal(o.schemeCategory10),l=o.forceManyBody().strength(-2);function c(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.source.toString(),r=t.target.toString(),o=[n,r];return!0===e&&o.sort(),o[0]+"-&-"+o[1]}function f(i){i.each(function(){var i=.625*r,f=o.select(this).append("svg").attr("width",r).attr("height",i);function s(t){o.event.active||h.alphaTarget(.3).restart(),t.fx=t.x,t.fy=t.y}function d(t){t.fx=o.event.x,t.fy=o.event.y}function p(t){o.event.active||h.alphaTarget(0),t.fx=null,t.fy=null}function y(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=u(0);m.domain(o.extent(g.nodes,function(t){return t.hasOwnProperty("flow")?t.flow:[5,5]})),console.log(m.domain());var a=t.enter().append("g").attr("class","node").call(o.drag().on("start",s).on("drag",d).on("end",p));t=t.merge(a).attr("cx",function(t){return t.x=r/2+t.x}).attr("cy",function(t){return t.y=i/2+t.y}).each(function(t){t.hasOwnProperty("flow")?t.radius=m(t.flow):t.radius=5,t.hasOwnProperty("cl_top")?t.color=u(t.cl_top):t.color=n});a.attr("transform",function(t){return"translate("+t.x+","+t.y+")"}).append("circle").attr("fill",function(t){return t.color}).attr("r",0);return null!==e?t.selectAll("circle").transition(e).attr("r",function(t){return t.radius}).attr("fill",function(t){return t.color}):t.selectAll("circle").attr("r",function(t){return t.radius}).attr("fill",function(t){return t.color}),t}function v(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=t.enter().append("line").attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y}).attr("class","link");return(t=t.merge(n)).attr("stroke-width",function(t){return Math.sqrt(t.weight)}),null!==e&&n.style("stroke","green"),t}var g=n;console.log(g),g.nodes.forEach(function(t){t.id=t.id.toString()}),g.links.forEach(function(t){t.id=c(t,g.directed)});var h=o.forceSimulation().force("link",o.forceLink().id(function(t){return t.id})).force("charge",l).force("center",o.forceCenter(r/2,i/2));h.nodes(g.nodes).on("tick",O),h.force("link").links(g.links);var m=o.scaleLinear().range([4,12]),b=f.append("g"),x=b.append("g").attr("class","links").selectAll(".link");x=x.data(g.links,function(t){return t.id});var _=b.append("g").attr("class","nodes").selectAll(".node");function O(){_.attr("cx",function(t){return t.x=Math.max(t.radius,Math.min(r-t.radius,t.x)),t.x}).attr("cy",function(t){return t.y=Math.max(t.radius,Math.min(r-t.radius,t.y)),t.y}).attr("transform",function(t){return"translate("+t.x+","+t.y+")"}),x.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}_=y(_=_.data(g.nodes,function(t){return t.id})),x=v(x),f.on("click",function(){_.classed("focus",!1),_.selectAll("text").style("display","none"),x.style("opacity",1),a("#nodelab-form").css("visibility","hidden")}),e=function(){},t=function(){(g=n).nodes.forEach(function(t){t.id=t.id.toString()}),g.links.forEach(function(t){t.id=c(t,g.directed)}),h.nodes(g.nodes).on("tick",O),h.force("link").links(g.links),console.log(g),h.stop();var t=(_=_.data(g.nodes,function(t){return t.id})).exit(),e=o.transition("updateData").duration(5e3);t.selectAll("circle").style("stroke","red").transition(e).attr("r",0),_=y(_,e);var r=(x=x.data(g.links,function(t){return t.id})).exit();r.style("stroke","red").transition(e).style("opacity",0).remove(),x=v(x,e),h.on("tick").call(),e.end().then(function(e){t.remove(),console.log("dddd")}),console.log("ssss")}})}return f.data=function(e){return arguments.length?(n=e,console.log(i(t)),"function"==typeof t&&t(),f):n},f.width=function(t){return arguments.length?(r=t,"function"==typeof e&&e(),f):r},f};e.default=u,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=a(n(5));n(6);var o=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}(n(0)),i=a(n(1));function a(t){return t&&t.__esModule?t:{default:t}}console.log(r.default);var u=i.default,l=function(){function t(t,e,n){t.find("."+e).find(".template-content").text(n)}console.log("activateTooltips()"),o.selectAll(".node circle").each(function(e){var n=u(c).clone().attr("id",null);if(this.hasOwnProperty("_tippy"))var o=this._tippy;else var o=(0,r.default)(this);t(n,"author_name",e.author_name),t(n,"affil_name",e.affil_name),e.hasOwnProperty("cl_bottom")&&t(n,"cluster_id",e.cl_bottom);for(var i=n.find(".paper_titles").find(".template-content"),a=0,l=e.papers.length;a<l;a++){var f=u('<li class="paper_title">').text(e.papers[a].title);i.append(f)}o.setContent(n.html())})};e.default=l,r.default.setDefaults({theme:"light-border",animateFill:!1,animation:"fade"});var c=document.getElementById("tooltip-template");t.exports=e.default},function(t,e){t.exports=n},function(t,e){}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,