!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3"),require("jQuery"),require("tippy.js")):"function"==typeof define&&define.amd?define("nodelink_vis_coauthorship",["d3","jQuery","tippy.js"],e):"object"==typeof exports?exports.nodelink_vis_coauthorship=e(require("d3"),require("jQuery"),require("tippy.js")):t.nodelink_vis_coauthorship=e(t.d3,t.jQuery,t.tippy)}("undefined"!=typeof self?self:this,function(t,e,n){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"NodeLinkCoauthorshipVis",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(e,"activateTooltips",{enumerable:!0,get:function(){return i.default}});var r=o(n(3)),i=o(n(4));function o(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}(n(0));function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=((r=n(1))&&r.__esModule?r:{default:r}).default,u=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var n={el:null,data:null,width:960,color:i.scaleOrdinal(i.schemeCategory10),forceStrength:-2};Object.assign(this,n,e),this._data=this.data,this.data=this.updateData,void 0===this.height&&(this.height=.625*this.width),this.manyBody=i.forceManyBody().strength(this.forceStrength),this.init=!1,console.log(this._data),null!==this.el&&null!==this._data&&(this.draw(this.el),this.init=!0)}var e,n,r;return e=t,(n=[{key:"getLinkId",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=[t.source.toString(),t.target.toString()];return!0===e&&n.sort(),n[0]+"-&-"+n[1]}},{key:"updateData",value:function(t){return arguments.length?(this._data=t,!1===this.init?(this.draw(this.el),this.init=!0):console.log("UPDATING DATA NOT YET IMPLEMENTED"),this):this._data}},{key:"draw",value:function(t){var e=this.width,n=this.height,r=this._data,o=this.manyBody,u=this.color,l=this.getLinkId;return t.each(function(){var t=i.select(this).append("svg").attr("width",e).attr("height",n);function c(t){i.event.active||d.alphaTarget(.3).restart(),t.fx=t.x,t.fy=t.y}function s(t){t.fx=i.event.x,t.fy=i.event.y}function f(t){i.event.active||d.alphaTarget(0),t.fx=null,t.fy=null}console.log(r),r.nodes.forEach(function(t){t.id=t.id.toString()}),r.links.forEach(function(t){t.id=l(t,r.directed)});var d=i.forceSimulation().force("link",i.forceLink().id(function(t){return t.id})).force("charge",o).force("center",i.forceCenter(e/2,n/2));d.nodes(r.nodes).on("tick",function(){v.attr("cx",function(t){return t.x=Math.max(t.radius,Math.min(e-t.radius,t.x)),t.x}).attr("cy",function(t){return t.y=Math.max(t.radius,Math.min(e-t.radius,t.y)),t.y}).attr("transform",function(t){return"translate("+t.x+","+t.y+")"}),y.attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y})}),d.force("link").links(r.links),this.simulation=d;var p=i.scaleLinear().range([4,12]),h=t.append("g"),y=h.append("g").attr("class","links").selectAll(".link");y=y.data(r.links,function(t){return t.id});var v=h.append("g").attr("class","nodes").selectAll(".node");v=function(t){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,a=u(0);p.domain(i.extent(r.nodes,function(t){return t.hasOwnProperty("flow")?t.flow:[5,5]})),console.log(p.domain());var l=t.enter().append("g").attr("class","node").call(i.drag().on("start",c).on("drag",s).on("end",f));return t=t.merge(l).attr("cx",function(t){return t.x=e/2+t.x}).attr("cy",function(t){return t.y=n/2+t.y}).each(function(t){t.hasOwnProperty("flow")?t.radius=p(t.flow):t.radius=5,t.hasOwnProperty("cl_top")?t.color=u(t.cl_top):t.color=a}),l.attr("transform",function(t){return"translate("+t.x+","+t.y+")"}).append("circle").attr("fill",function(t){return t.color}).attr("r",0),null!==o?t.selectAll("circle").transition(o).attr("r",function(t){return t.radius}).attr("fill",function(t){return t.color}):t.selectAll("circle").attr("r",function(t){return t.radius}).attr("fill",function(t){return t.color}),t}(v=v.data(r.nodes,function(t){return t.id})),y=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=t.enter().append("line").attr("x1",function(t){return t.source.x}).attr("y1",function(t){return t.source.y}).attr("x2",function(t){return t.target.x}).attr("y2",function(t){return t.target.y}).attr("class","link");return(t=t.merge(n)).attr("stroke-width",function(t){return Math.sqrt(t.weight)}),null!==e&&n.style("stroke","green"),t}(y),t.on("click",function(){v.classed("focus",!1),v.selectAll("text").style("display","none"),y.style("opacity",1),a("#nodelab-form").css("visibility","hidden")})}),this}}])&&o(e.prototype,n),r&&o(e,r),t}();e.default=u,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=o(n(5));n(6);var i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,n):{};r.get||r.set?Object.defineProperty(e,n,r):e[n]=t[n]}return e.default=t,e}(n(0));function o(t){return t&&t.__esModule?t:{default:t}}var a=o(n(1)).default,u=function(){function t(t,e,n){t.find("."+e).find(".template-content").text(n)}console.log("activateTooltips()"),i.selectAll(".node circle").each(function(e){var n=a(l).clone().attr("id",null);if(this.hasOwnProperty("_tippy"))var o=this._tippy;else var o=(0,r.default)(this);t(n,"author_name",e.author_name),e.hasOwnProperty("affil_name")&&e.affil_name.length?t(n,"affil_name",e.affil_name):n.find(".affil_name").hide();var u=n.find(".paper_titles").find(".template-content"),c=e.papers;c.sort(function(t,e){return i.ascending(t.title,e.title)});for(var s=0,f=c.length;s<f;s++){var d=a('<li class="paper_title">').text(c[s].title);u.append(d)}o.setContent(n.html())})};e.default=u,r.default.setDefaults({theme:"light-border",animateFill:!1,animation:"fade"});var l=document.getElementById("tooltip-template");t.exports=e.default},function(t,e){t.exports=n},function(t,e){}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,